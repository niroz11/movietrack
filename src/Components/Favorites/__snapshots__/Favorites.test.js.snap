// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Favorites Favorites should match snapshot with all the data passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Favorites
    email="abc@xyz.com"
    favoriteMovies={
      Array [
        Object {
          "poster_path": "car.jpg",
          "title": "Cars",
        },
        Object {
          "poster_path": "dragon.jpg",
          "title": "How To Train Your Dragon",
        },
      ]
    }
    id="2"
    updateUser={[MockFunction]}
    user="1"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Card
          movies={
            Object {
              "poster_path": "car.jpg",
              "title": "Cars",
            }
          }
          user="1"
        />,
        <Card
          movies={
            Object {
              "poster_path": "dragon.jpg",
              "title": "How To Train Your Dragon",
            }
          }
          user="1"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "id": undefined,
          "movies": Object {
            "poster_path": "car.jpg",
            "title": "Cars",
          },
          "updateUser": undefined,
          "user": "1",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "id": undefined,
          "movies": Object {
            "poster_path": "dragon.jpg",
            "title": "How To Train Your Dragon",
          },
          "updateUser": undefined,
          "user": "1",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Card
            movies={
              Object {
                "poster_path": "car.jpg",
                "title": "Cars",
              }
            }
            user="1"
          />,
          <Card
            movies={
              Object {
                "poster_path": "dragon.jpg",
                "title": "How To Train Your Dragon",
              }
            }
            user="1"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": undefined,
            "movies": Object {
              "poster_path": "car.jpg",
              "title": "Cars",
            },
            "updateUser": undefined,
            "user": "1",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": undefined,
            "movies": Object {
              "poster_path": "dragon.jpg",
              "title": "How To Train Your Dragon",
            },
            "updateUser": undefined,
            "user": "1",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
